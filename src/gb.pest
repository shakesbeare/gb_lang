// Setup
WHITESPACE = _{ " " | NEWLINE | "\t" }
COMMENT = _{ "//" ~ (!NEWLINE ~ ANY)* }

integer = @{ ASCII_DIGIT+ }
float = @{
      ASCII_DIGIT+ ~ "." ~ ASCII_DIGIT*
    | "." ~ ASCII_DIGIT+
    | ASCII_DIGIT+ ~ "f"
}

keyword = _{
      if_
    | return_
    | else_
    | let_
}

if_ = _{ "if" }
let_ = _{ "let" }
else_ = _{ "else" }
return_ = _{ "return" }
while_ = _{ "while" }
fn_ = _{ "fn" }

identifier = @{ (ASCII_ALPHA | "_")+ ~ ASCII_ALPHANUMERIC* }

number = _{ float | integer }
boolean = { "true" | "false" }
atom = _{ boolean | identifier | number | unary_minus | "(" ~ expr ~ ")" | compound_expr }


bin_op = _{ unary_expr | add | subtract | multiply | divide | modulo | assign | less_than | greater_than }
    assign = { "=" }
    less_than = { "<" }
    greater_than = { ">" }
    add = { "+" }
    subtract = { "-" }
    multiply = { "*" }
    divide = { "/" }
    modulo = { "%" }

unary_expr = _{ call | unary_minus }
    call = {identifier ~  "(" ~ (expr ~ ",")* ~ ")" }
    unary_minus = { "-" ~ atom }

compound_expr = { "{" ~ expr* ~ "}" }
expr = { 
      return_expr
    | if_expr
    | while_expr
    | function_definition
    | atom ~ (bin_op ~ expr) ~ ";"?
    | atom ~ (bin_op ~ atom)* ~ ";"?
}

expr_body = { compound_expr }

return_expr = { return_ ~ expr }
if_expr = { if_ ~ expr ~ expr_body ~ else_expr* }
else_expr = { else_~ ( if_expr | expr) }
let_expr = { let_ ~ identifier ~ assign ~ atom }
while_expr = { while_ ~ expr ~ expr_body }
function_definition = { fn_ ~ "(" ~ ( identifier ~ ":" ~ identifier ~ ",")* ~ compound_expr }

file = _{ SOI ~ expr* ~ EOI }


